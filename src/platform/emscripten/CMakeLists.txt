
add_library(SDL2 UNKNOWN IMPORTED)
set_property(TARGET SDL2 APPEND PROPERTY IMPORTED_LOCATION  "${THIRDPARTY_DIR}/platform/${TARGET_PLATFORM}/libSDL2.a")
list(APPEND TARGET_LIBRARIES SDL2)

# add_library(SDL_test UNKNOWN IMPORTED)
# set_property(TARGET SDL_test APPEND PROPERTY IMPORTED_LOCATION  "${THIRDPARTY_DIR}/platform/${TARGET_PLATFORM}/libSDL2_test.a")
# list(APPEND TARGET_LIBRARIES SDL_test)

add_library(SDL2main UNKNOWN IMPORTED)
set_property(TARGET SDL2main APPEND PROPERTY IMPORTED_LOCATION  "${THIRDPARTY_DIR}/platform/${TARGET_PLATFORM}/libSDL2main.a")
list(APPEND TARGET_LIBRARIES SDL2main)

set_target_properties(SDL2 PROPERTIES INTERFACE_INCLUDE_DIRECTORIES ${THIRDPARTY_DIR}/includes/SDL2)

list(APPEND TARGET_INCLUDE_DIRS ${THIRDPARTY_DIR}/includes/SDL2)

set(CMAKE_CXX_FLAGS_DEBUG "--js-opts 0 -g4")
set(CMAKE_CXX_FLAGS_MINSIZEREL "-Os -DNDEBUG --llvm-opts 3 --js-opts 1 --closure 1 -s IGNORE_CLOSURE_COMPILER_ERRORS=1")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG --llvm-opts 3 --js-opts 1 --closure 1 -s IGNORE_CLOSURE_COMPILER_ERRORS=1")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 --js-opts 0 -g4 -DNDEBUG")

set(CMAKE_C_FLAGS_DEBUG "--js-opts 0 -g4")
set(CMAKE_C_FLAGS_MINSIZEREL "-Os -DNDEBUG --llvm-opts 3 --js-opts 1 --closure 1 -s IGNORE_CLOSURE_COMPILER_ERRORS=1")
set(CMAKE_C_FLAGS_RELEASE "-O3 -DNDEBUG --llvm-opts 3 --js-opts 1 --closure 1 -s IGNORE_CLOSURE_COMPILER_ERRORS=1")
set(CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 --js-opts 0 -g4 -DNDEBUG")

# if(PTHREADS)
#   list(APPEND EXTRA_LDFLAGS "-s USE_PTHREADS=1")
#   list(APPEND EXTRA_LDFLAGS "-s PTHREAD_POOL_SIZE=8")
# endif()
# list(APPEND EXTRA_LDFLAGS "--no-check-features")

list(APPEND EXTRA_LDFLAGS "-s FULL_ES2=1")
list(APPEND EXTRA_LDFLAGS "-s TOTAL_MEMORY=1GB")

list(APPEND EXTRA_LDFLAGS "-s ERROR_ON_UNDEFINED_SYMBOLS=0")
list(APPEND EXTRA_LDFLAGS "-s WASM=1")

list(APPEND EXTRA_FLAGS "--memory-init-file")

string(TOUPPER CMAKE_BUILD_TYPE CMAKE_BUILD_TYPE_UPPER)
if (CMAKE_BUILD_TYPE_UPPER EQUAL "DEBUG")
    list(APPEND EXTRA_LDFLAGS "--emrun")
    list(APPEND EXTRA_LDFLAGS "-s ASSERTIONS=2")
    list(APPEND EXTRA_LDFLAGS "-s DEMANGLE_SUPPORT=1")
    list(APPEND EXTRA_LDFLAGS "-s DISABLE_DEPRECATED_FIND_EVENT_TARGET_BEHAVIOR=1")
    list(APPEND EXTRA_LDFLAGS "--source-map-base")
endif ()

if (CMAKE_BUILD_TYPE_UPPER EQUAL "RELEASE")
    list(APPEND EXTRA_LDFLAGS "--profiling")
endif ()

configure_file("${CMAKE_CURRENT_SOURCE_DIR}/resources/release_shell.html.in" "${CMAKE_BINARY_DIR}/release_shell.html")
list(APPEND EXTRA_LDFLAGS "--shell-file ${CMAKE_BINARY_DIR}/release_shell.html")

SET(CMAKE_EXECUTABLE_SUFFIX ".html")

set( GAME_RESOURCES "${TARGET_RESOURCES}" )
list(APPEND TARGET_RESOURCES ${GAME_RESOURCES})

list(APPEND EXTRA_LDFLAGS "--memory-init-file 1")
list(APPEND EXTRA_LDFLAGS "--embed-file ${GAME_RESOURCES}@/")

add_executable( ${CMAKE_PROJECT_NAME} ${TARGET_PROJECT_SOURCES} ${TARGET_MAIN_SOURCES} ${TARGET_RESOURCES} ${TARGET_INCLUDE_DIRS})
target_compile_definitions( ${CMAKE_PROJECT_NAME} PUBLIC ${TARGET_DEFINITIONS})
target_link_libraries( ${CMAKE_PROJECT_NAME} ${TARGET_LIBRARIES} ${EXTRA_LDFLAGS})
set_property(TARGET ${CMAKE_PROJECT_NAME} PROPERTY OUTPUT_NAME "index")
set_property(TARGET ${CMAKE_PROJECT_NAME} PROPERTY INCLUDE_DIRECTORIES ${TARGET_INCLUDE_DIRS})

# list(APPEND TARGET_LIBRARIES "-framework CoreVideo")
# list(APPEND TARGET_LIBRARIES "-framework Cocoa")
# list(APPEND TARGET_LIBRARIES "-framework IOKit")
# list(APPEND TARGET_LIBRARIES "-framework ForceFeedback")
# list(APPEND TARGET_LIBRARIES "-framework Carbon")
# list(APPEND TARGET_LIBRARIES "-framework CoreAudio")
# list(APPEND TARGET_LIBRARIES "-framework AudioToolbox")
# list(APPEND TARGET_LIBRARIES "-framework Metal")
#
# set(ASSET_CATALOGUE ${CMAKE_CURRENT_SOURCE_DIR}/resources/Assets.xcassets)
# list(APPEND TARGET_RESOURCES ${ASSET_CATALOGUE})
#
# configure_file(${CMAKE_CURRENT_SOURCE_DIR}/resources/Info.plist.in ${CMAKE_BINARY_DIR}/Info.plist)
# set_source_files_properties( ${TARGET_RESOURCES} PROPERTIES MACOSX_PACKAGE_LOCATION ${CMAKE_PROJECT_NAME}/Contents/Resources/)
#
# add_executable( ${CMAKE_PROJECT_NAME} MACOSX_BUNDLE ${TARGET_PROJECT_SOURCES} ${TARGET_MAIN_SOURCES} ${TARGET_RESOURCES})
# target_compile_definitions( ${CMAKE_PROJECT_NAME} PUBLIC ${TARGET_DEFINITIONS})
# target_link_libraries( ${CMAKE_PROJECT_NAME} ${TARGET_LIBRARIES})
# set_property(TARGET ${CMAKE_PROJECT_NAME} PROPERTY INCLUDE_DIRECTORIES ${TARGET_INCLUDE_DIRS})
# set_property(TARGET ${CMAKE_PROJECT_NAME} PROPERTY RESOURCE ${TARGET_RESOURCES})
# set_property(TARGET ${CMAKE_PROJECT_NAME} PROPERTY MACOSX_BUNDLE_INFO_PLIST ${CMAKE_BINARY_DIR}/Info.plist)
# set_property(TARGET ${CMAKE_PROJECT_NAME} PROPERTY XCODE_ATTRIBUTE_ASSETCATALOG_COMPILER_APPICON_NAME "AppIcon")
# set_property(TARGET ${CMAKE_PROJECT_NAME} PROPERTY XCODE_ATTRIBUTE_PRODUCT_BUNDLE_IDENTIFIER ${TARGET_BUNDLE_ID}.${TARGET_PLATFORM})
# set_property(TARGET ${CMAKE_PROJECT_NAME} PROPERTY XCODE_ATTRIBUTE_CODE_SIGN_IDENTITY "Mac Developer")
# set_property(TARGET ${CMAKE_PROJECT_NAME} PROPERTY MACOSX_BUNDLE TRUE)
# set_property(TARGET ${CMAKE_PROJECT_NAME} PROPERTY XCODE_ATTRIBUTE_INSTALL_PATH "/Applications")
# set_property(TARGET ${CMAKE_PROJECT_NAME} PROPERTY OUTPUT_NAME "index")
#
# set_property(TARGET ${CMAKE_PROJECT_NAME} PROPERTY XCODE_ATTRIBUTE_DEVELOPMENT_TEAM "${XCODE_DEVELOPMENT_TEAM}")
#
# if(TARGET_PROJECT_SOURCES)
#     add_library(${CMAKE_PROJECT_NAME}-static STATIC ${TARGET_PROJECT_SOURCES})
#     target_compile_definitions(${CMAKE_PROJECT_NAME}-static PUBLIC ${TARGET_DEFINITIONS})
#     target_link_libraries( ${CMAKE_PROJECT_NAME}-static ${TARGET_LIBRARIES})
#     set_property(TARGET ${CMAKE_PROJECT_NAME}-static PROPERTY INCLUDE_DIRECTORIES ${TARGET_INCLUDE_DIRS})
#     set_property(TARGET ${CMAKE_PROJECT_NAME}-static PROPERTY OUTPUT_NAME "index")
#
#     install(TARGETS ${CMAKE_PROJECT_NAME}-static EXPORT ${CMAKE_PROJECT_NAME}Targets
#         LIBRARY DESTINATION lib
#         ARCHIVE DESTINATION archive
#         RUNTIME DESTINATION bin)
#
#     set(INCLUDE_FILES "")
#     foreach(include_dir ${TARGET_INCLUDE_DIRS})
#         set(_INCLUDE_FILES "")
#         file(GLOB _INCLUDE_FILES ${include_dir}/*.h*)
#         list(APPEND INCLUDE_FILES ${INCLUDE_FILES})
#     endforeach()
#
#     install(FILES ${INCLUDE_FILES} DESTINATION include/${CMAKE_PROJECT_NAME})
#
#
# endif()
#
#
# enable_testing()
# add_subdirectory(test)
